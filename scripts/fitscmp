#! /usr/bin/env python
#
#  compare images using various metrics from skimage, OpenCV etc.
#
#  History:
#    30-jul-2020    hacked for dc2019        Peter Teuben
#
#  @todo make it ready for CASA6

import os, sys
import numpy as np
import numpy.ma as ma
import matplotlib.pyplot as plt
try:
    from astropy.io import fits
except:
    import pyfits as fits

# pip install scikit-image
try:
    import skimage.metrics as skm
except:
    skm = None

# pip install opencv-python    
try:
    import cv2
except:
    cvs = None
    


def qac_compare(image1, image2, channel=False, ds9=False, method='mse'):
    """    
    image1, image2: two images to compare. They need to be fits files.
    
    channel:   if True, if will return an array (one per channel)

    ds9:       if True, send image1, image2 and image1-image2 to ds9
               channels 1,2,3
    
    method:    'MSE'    Mean Squared Error
               'SSIM'   Structural Similarity Index (Wang et al 2004)

    returns:    the number (or array) associated with the method
   
    """

    # grab data
    if False:
        # if casa image
        tb.open(image1)
        d1 = tb.getcol('map').squeeze()
        tb.close()
        
        tb.open(image2)
        d2 = tb.getcol('map').squeeze()
        tb.close()
        n1 = 0
        n2 = 0
    else:
        # if fits file
        d1 = fits.open(image1)[0].data.squeeze()
        d2 = fits.open(image2)[0].data.squeeze()
        d1 = ma.masked_invalid(d1)
        d2 = ma.masked_invalid(d2)
        m1 = ma.getmask(d1)
        m2 = ma.getmask(d2)
        d1 = ma.masked_where(m2,d1)
        d2 = ma.masked_where(m1,d2)
        d1 = ma.fix_invalid(d1,fill_value=0.0)
        d2 = ma.fix_invalid(d2,fill_value=0.0)
        n1 = d1.count()
        n2 = d2.count()

    if d1.shape != d2.shape:
        print('images do not have same shape')
        return -1

    ndim = len(d1.shape)

    n = 1
    for s in d1.shape:
        n = n * s
        
    if ndim == 3:
        if channel==False:
            sys.stderr.write("Warning: doing channels anyways\n")

        nz = d1.shape[0]
        n = d1.shape[1] * d1.shape[2]
        cmp1 = np.zeros(nz)
        for z in range(nz):
            cmp1[z] = np.sum( (d1[z]-d2[z])**2 ) / n

        print("#  MSE  SSIM")            
        if skm != None:
            cmp2 = np.zeros(nz)
            for z in range(nz):
                cmp2[z] = skm.structural_similarity(d1[z],d2[z])
                print(cmp1[z],cmp2[z])
        else:
            for z in range(nz):
                print(cmp1[z],-1)
        sys.exit(0)
    else:
        # MSE
        cmp1 = np.sum( (d1-d2)**2 ) / n

    # NMSE
    cmp1a = skm.normalized_root_mse(d1,d2)
    cmp1b = skm.mean_squared_error(d1,d2)

    # SSIM
    if skm != None:
        cmp2 = skm.structural_similarity(d1,d2)
        cmp1a = skm.mean_squared_error(d1,d2)
        cmp1b = skm.normalized_root_mse(d1,d2,normalization='euclidean')
        cmp1c = skm.normalized_root_mse(d1,d2,normalization='min-max')
        cmp1d = skm.normalized_root_mse(d1,d2,normalization='mean')
        cmp3 = -1
        # cmp3 = skm.peak_signal_noise_ratio(d1,d2)
        print('#    MSE    MSE   EUCL MIN-MAX MEAN    SSIM     n/a')
        print('ALL:',cmp1,cmp1a,cmp1b,cmp1c,cmp1d," ",cmp2," ",cmp3," ",n,n1,n2)
        d3 = d1-d2
        print("MEAN/SIG: ",d3.mean(), d3.std())
    else:
        print(cmp1)

    if ds9:
        hdu1 = fits.open(image1)
        hdu2 = fits.open(image2)
        image3 = 'tmp_diff.fits'
        data = hdu1[0].data - hdu2[0].data
        beam1 = hdu1[0].header['BMAJ']
        beam2 = hdu2[0].header['BMAJ']
        print("Beams: %g %g arcsec" % (beam1*3600,beam2*3600))
        hdu = fits.PrimaryHDU(data)
        hdu.header = hdu1[0].header
        hdul = fits.HDUList([hdu])
        hdul.writeto(image3,overwrite=True)
        print("Wrote %s" % image3)
        for (frame,name) in  zip([1,2,3],[image1,image2,image3]):
            cmd = "xpaset -p ds9 frame frameno %d; cat %s | xpaset ds9 fits %s" % (frame,name,name)
            os.system(cmd)
            print("CMD:",cmd)
        

    #-end of qac_compare()

fitsfile1 = sys.argv[1]
fitsfile2 = sys.argv[2]

ds9 = True
qac_compare(fitsfile1,fitsfile2,ds9=ds9)

