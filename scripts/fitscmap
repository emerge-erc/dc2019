#! /usr/bin/env python
#
#  Create a color image from a FITS file, using a colormap and optional min/max/sigma
#  if sigma given, if will use that for the ASINH rescaling, units will be this rescaled
#  one.
#
#  Usage:      fitscmap fitsfile colormap [dmin dmax sigma]
#
#  Supposed to work within casa as well, but it won't return valid cmap names
#  You will need to have casa's python in your $PATH.
#
#  Warning: If you python has aplpy, it will use that at the end instead.
#      pip install aplpy
#
#  Optionally 
#      pip install cmasher
#  to get more advanced color maps.
#
#  History:
#    29-jul-2020    hacked for dc2019        Peter Teuben
#


import sys
import numpy as np
import numpy.ma as ma
import matplotlib.pyplot as plt
try:
    from astropy.io import fits
except:
    import pyfits as fits

try:
    import aplpy
    Qaplpy = True
except:
    Qaplpy = False

try:
    import pandas as pd
    import seaborn as sns
    plt.rcParams['font.family'] = 'serif'
    plt.rcParams['font.size'] = 6
    plt.rcParams['mathtext.rm'] = 'serif'
    plt.rcParams['mathtext.fontset'] = 'cm'
    from astropy.visualization import (ManualInterval, AsinhStretch, ImageNormalize, LogStretch)
    #
    pal=sns.cubehelix_palette(n_colors=8,start=0.3,rot=-0.3,light=1.0,dark=0.0)
    pal[1] = [0.9, 0.9, 0.9]
    pal[2] = [0.85, 0.85, 0.85]
    cmap = LinearSegmentedColormap.from_list('test',pal,N=256)
except:
    print("Tried something new, but it didn't work yet. Continuing without it")


if len(sys.argv) == 1:
    sys.stderr.write("Usage %s FITSFILE [cmr.]CMAP [min max asinh_sigma]\n" % sys.argv[0])
    sys.stderr.write("  See e.g. https://cmasher.readthedocs.io/user/cmap_overviews/mpl_cmaps.html\n")
    sys.stderr.write("  for advanced colormaps\n")
    sys.stderr.write("  The prefix 'cmr.' is optional, it will try CMAP with and without\n")
    sys.exit(0)

try:
    import cmasher as cmr
except:
    sys.stderr.write("No cmasher present, try:\n")
    sys.stderr.write("    pip install cmasher\n")
    sys.stderr.write("Continuing with the default mpl\n")


fitsfile      = sys.argv[1]
colormap_name = sys.argv[2]
dmin = None
dmax = None
sigma = None
if len(sys.argv) > 3:   dmin  = float(sys.argv[3])
if len(sys.argv) > 4:   dmax  = float(sys.argv[4])
if len(sys.argv) > 5:   sigma = float(sys.argv[5])
    

try:
    cmap = plt.get_cmap(colormap_name)
    sys.stderr.write("Found %s\n" % colormap_name)
except:
    print("# No known colormap %s, valid ones are:" % colormap_name)
    cmaps = plt.colormaps()
    for cmap in cmaps:
        print(cmap)
    print("# These are the %d currently known colormaps" % len(cmaps))
    sys.exit(1)


data =  fits.open(fitsfile)[0].data.squeeze()
if len(data.shape) != 2:
    print("Don't know how to deal with this shape: %s" % repr(data.shape))
    sys.exit(1)
data = ma.masked_invalid(data)
print("Data min/max: %g %g" % (data.min(),data.max()))
if dmin == None: dmin = data.min()
if dmax == None: dmax = data.max()

if sigma != None and sigma != 0.0:
    print("ASINH rescaling %g" % sigma) 
    data = np.arcsinh((data-dmin)/sigma)
    dmin = 0.0
    dmax = np.arcsinh((dmax-dmin)/sigma)

plotname = '%s.%s.png' % (fitsfile,colormap_name)


plt.figure()
plt.imshow(data,origin='lower',cmap=cmap,vmin=dmin,vmax=dmax)
plt.colorbar()
plt.title('%s %s' % (fitsfile,colormap_name))
plt.savefig(plotname)
#plt.show()

# 2nd chance
Qaplpy = False    


if Qaplpy:
    print("Trying aplpy")
    fig = aplpy.FITSFigure(fitsfile)
    if sigma != 0.0:
        # there is no way to use our sigma here.
        # https://github.com/aplpy/aplpy/issues?q=arcsinh
        fig.show_colorscale(cmap=colormap_name,vmin=dmin,vmax=dmax,stretch='arcsinh')
    else:
        fig.show_colorscale(cmap=colormap_name,vmin=dmin,vmax=dmax)
    fig.add_colorbar()
    # fig.set_nan_color('black')
    # fig.set_theme('publication')
    fig.save(plotname)

print("xdg-open %s" % plotname)
